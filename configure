#!/bin/bash

if test "$*" = "--help"; then
  echo "Prepares dirr for compilation."
  exit 1
fi

. ./config.sub1
. ./config.sub2

cat >config.h <<EOF
// These settings can be changed by user.

// Recommended, adds speed
#define CACHE_UIDGID 1

// They can be disabled if you do not want them.
#define SUPPORT_BRACKETS 1

// Enable this if you want a progress meter. Slows down.
#define STARTUP_COUNTER 0

// Set this to 1 if your passwd file is quick to load.
#define PRELOAD_UIDGID 0

// Set this to 1 if you want dot-files always shown.
#define ALWAYS_SHOW_DOTFILES 0

// File containing the settings. Can be changed.
#define SETTINGSFILE "dirrsets.hh"

EOF

rm -f configure.log
DEVNULL=configure.log

cc_check() {
    rm -f conftest*
    cat > conftest.cpp << EOF
#include $1
int main () { $3 return 0; }
EOF
    echo "	conftest.cpp:" >> $DEVNULL
    cat conftest.cpp >> $DEVNULL
    echo "	$CXX conftest.cpp $CXXFLAGS $LDFLAGS $2 -o conftest" >> $DEVNULL
    $CXX conftest.cpp $CXXFLAGS $LDFLAGS $2 -o conftest 2>>conftest.log2

    TMP="$?"

    if [ $TMP = 0 ]; then
      if grep -q "argument unused during compilation" conftest.log2; then TMP=1; fi
      if grep -q "unknown .*option" conftest.log2; then TMP=1; fi
    fi

    rm -f conftest*
    return $TMP
}

select_tool() {
    toolname=$1
    shift
    echo -n '' > conftest
    for tool in $*; do
      tool_ver="`$tool -dumpversion 2>&1`"
      if test ! "$?" -gt 0; then echo -e "$tool_ver	$tool" >> conftest; fi
    done
    if test -z "`cat conftest`"; then
      echo ""
      echo "Error: Unable to determine a suitable $toolname".
      echo "Configure cannot progress. Try installing $1."
      exit 1
    fi
    cat conftest >> $DEVNULL
    sel_tool="`sort -rn < conftest | head -n 1 | sed 's/.*	//'`"
    sel_ver="`sort -rn < conftest | head -n 1 | sed 's/	.*//'`"
    eval "$toolname"="'$sel_tool'"
    do_echo -n "$toolname=$sel_tool($sel_ver) "
}

do_echo() {
  op=""
  if test x"$1" = x"-n"; then op="$1"; shift; fi
  echo $op "$*"
  echo "$*" >> $DEVNULL
}

CFLAGS=""
CPPFLAGS=""
LDFLAGS=""
OPTIM=""

do_echo -n "Determining compiler version to use... "
select_tool CXX g++ `(IFS=':'; for s in $PATH;do cd "$s"&&echo g++-*;done|grep -v libc) 2>/dev/null` clang++
select_tool CPP g++ `(IFS=':'; for s in $PATH;do cd "$s"&&echo g++-*;done|grep -v libc) 2>/dev/null` clang++
select_tool CC  gcc cc `(IFS=':'; for s in $PATH;do cd "$s"&&echo gcc-*;done|grep -v libc) 2>/dev/null` clang
#select_tool CXX clang++
#select_tool CPP clang++
#select_tool CC clang
do_echo ""

do_echo -n "Checking if the determined compiler works... "
if cc_check '<stdio.h>' '' 'for(int a=0; a<10;++a) { for(int a=0; a<5;++a) { } } puts("ok");'; then
  do_echo Ok
else
  do_echo No
  do_echo "Error: Configure cannot figure out how to use your compiler."
  do_echo "Please try installing some recent version of gcc."
  exit 1
fi



AC_INCLUDES="termio.h sys/stat.h sys/types.h"
. ./config.sub3
cat conftest.h >> config.h
rm -f conftest.[ch]

AC_FUNC="vsnprintf cstdio"
AC_FUNC="$AC_FUNC statfs sys/vfs.h  statfs sys/statfs.h  statfs sys/mount.h  statfs sys/statvfs.h"
AC_FUNC="$AC_FUNC ioctl unistd.h  ioctl sys/ioctl.h  ioctl sys/linux_ioctl.h"
AC_FUNC="$AC_FUNC tcgetattr termios.h"
AC_FUNC="$AC_FUNC readdir dirent.h  readdir direct.h  readdir dir.h"
AC_FUNC="$AC_FUNC getgrent grp.h"
AC_FUNC="$AC_FUNC getpwent pwd.h"
AC_FUNC="$AC_FUNC getgrgid grp.h"
AC_FUNC="$AC_FUNC getpwuid pwd.h"
function test_func()
{
	while [ ! "$1" = "" ]; do
		ac_f="$1"
		ac_inc="$2"
		ac_g=`echo "$ac_f" | sed 'y%./+-%__p_%'`
		ac_gi=`echo "$ac_inc" | sed 'y%./+-%__p_%'`
		eval ac_test='$'"ac_has_$ac_g"
		shift
		shift
		if [ ! "$ac_test" = "yes" ]; then
			echo $ac_n Checking for "$ac_f in $ac_inc"...$ac_c
			if cc_check "<$ac_inc>" '' "void*p  = (void*) $ac_f; "; then
				echo " yes"
				echo $ac_n "#define HAVE_$ac_c" >>config.h
				echo "$ac_f"_"$ac_gi" | sed y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ >> config.h
				echo $ac_n "#define HAVE_$ac_c" >>config.h
				echo "$ac_f" | sed y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ >> config.h
				eval "ac_has_$ac_g=yes"
			else
				echo " no"
				echo $ac_n "#undef HAVE_$ac_c" >> config.h
				echo "$ac_f"_"$ac_gi" | sed y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ >> config.h
			fi
		else
			echo $ac_n "#undef HAVE_$ac_c" >> config.h
			echo $ac_n "$ac_f"_"$ac_gi"$ac_c | sed y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/ >> config.h
			echo " // Untested, redundant" >> config.h
		fi
	done
}
test_func $AC_FUNC





do_echo -n "Checking for -std=c++17... "
if cc_check '<stdio.h>' '-std=c++17' ''; then
  do_echo Yes
  CPPFLAGS="$CPPFLAGS -std=c++17"
else
  do_echo No
  do_echo -n "Checking for -std=c++14... "
  if cc_check '<stdio.h>' '-std=c++14' ''; then
    do_echo Yes
    CPPFLAGS="$CPPFLAGS -std=c++14"
  else
    do_echo No
    do_echo -n "Checking for -std=c++11... "
    if cc_check '<stdio.h>' '-std=c++11' ''; then
      do_echo Yes
      CPPFLAGS="$CPPFLAGS -std=c++11"
    else
      do_echo No
    fi
  fi
fi

do_echo -n "Checking for -Ofast... "
if cc_check '<stdio.h>' '-Ofast' ''; then
  do_echo Yes
  OPTIM="$OPTIM -Ofast"
else
  do_echo No
  do_echo -n "Checking for -ffast-math... "
  if cc_check '<string.h>' '-ffast-math' ''; then
    do_echo Yes
    OPTIM="$OPTIM -ffast-math"
  else
    do_echo No
  fi
  do_echo -n "Checking for -O3... "
  if cc_check '<stdio.h>' '-O3' ''; then
    do_echo Yes
    OPTIM="$OPTIM -O3"
  else
    do_echo No
    do_echo -n "Checking for -O2... "
    if cc_check '<stdio.h>' '-O2' ''; then
      do_echo Yes
      OPTIM="$OPTIM -O2"
    else
      do_echo No
    fi
  fi
fi

WARNINGS=""
CWARNINGS=""
CXXWARNINGS=""

if [ "$CC" = "icc" ]; then
  #do_echo -n "Checking for -pch... "
  #if cc_check '<stdio.h>' '-pch' 'int x,y[100];for(x=0; x<100;++x)y[x]=5;'; then
  #  do_echo Yes
  #  OPTIM="$OPTIM -pch"
  #else
  #  do_echo No
  #fi
  true
else
  #LDFLAGS="$LDFLAGS -Xlinker --gc-sections"

  do_echo -n "Checking for -minline-stringops-dynamically... "
  if cc_check '<string.h>' '-minline-stringops-dynamically' 'char buf1[64],buf2[80]="kissa"; memcpy(buf1,buf2,sizeof(buf2)-strlen(buf2));'; then
    do_echo Yes
    OPTIM="$OPTIM -minline-stringops-dynamically"
  else
    do_echo No
  fi
  
  # Removed from the list:
  # -ftree-switch-conversion (new in GCC 4.4, automatically turned on by -O2)
  # -ftree-vectorize (new in GCC 4.0, automatically turned on by -O3 at least since GCC 4.3)
  
  # -fwhole-program (new in GCC-4.4, makes compiler assume that
  #                  the included source files consist of entire
  #                  program, messing link semantics)

  T_OPTIM="-ffunction-cse -ffunction-sections -fdata-sections"
  for s in $T_OPTIM;do
    do_echo -n "Checking for $s... "
    if cc_check '<stdio.h>' "$s" 'int x,y[100];for(x=0; x<100;++x)y[x]=5;'; then
      do_echo Yes
      OPTIM="$OPTIM $s"
    else
      do_echo No
    fi
  done
  
  T_LDFLAGS="\
    -Wl,--gc-sections"
  for s in $T_LDFLAGS;do
    do_echo -n "Checking for $s... "
    if cc_check '<stdio.h>' "$s" 'int x,y[100];for(x=0; x<100;++x)y[x]=5;'; then
      do_echo Yes
      LDFLAGS="$LDFLAGS $s"
    else
      do_echo No
    fi
  done
  
  
  #-fconserve-stack
  
  T_WARNINGS="-Wall \
    -Wundef \
    -Wcast-qual \
    -Wpointer-arith \
    -Wconversion \
    -Wwrite-strings \
    -Wsign-compare \
    -Wredundant-decls \
    -Winit-self \
    -Wextra \
    -Wsequence-points \
    -Wparentheses \
    -Wcast-align -Wformat \
    -Wno-conversion"
  T_CWARNINGS="-Waggregate-return -Wshadow -Winline \
    -Wstrict-prototypes \
    -Wmissing-prototypes"
  T_CXXWARNINGS="-Woverloaded-virtual -Weffc++ -Wno-non-virtual-dtor"

  for s in $T_WARNINGS;do
    do_echo -n "Checking for $s... "
    if cc_check '<stdio.h>' "$s" ''; then
      do_echo Yes
      WARNINGS="$WARNINGS $s"
    else
      do_echo No
    fi
  done
  for s in $T_CWARNINGS;do
    do_echo -n "Checking for $s... "
    if cc_check '<stdio.h>' "$s" ''; then
      do_echo Yes
      CWARNINGS="$CWARNINGS $s"
    else
      do_echo No
    fi
  done
  for s in $T_CXXWARNINGS;do
    do_echo -n "Checking for $s... "
    if cc_check '<stdio.h>' "$s" ''; then
      do_echo Yes
      CXXWARNINGS="$CXXWARNINGS $s"
    else
      do_echo No
    fi
  done
fi  

if [ -f /proc/cpuinfo ]; then
  echo "Your CPU has these features:"
  grep flags /proc/cpuinfo | uniq | sed 's/.*://' | tr ' ' '\012'|sort|grep .|(fmt -w60||cat)|sed 's/^/- /'
fi >> $DEVNULL

do_echo "Updating Makefile.sets ..."

DATE="`LC_ALL=C date`"
UNAME="`uname -a`"
sed_cmd=""
for s in CC CPP CXX OPTIM CPPFLAGS LDFLAGS FUSELIBS DATE UNAME WARNINGS CWARNINGS CXXWARNINGS; do
  eval value=\"\$$s\"
  sed_cmd="$sed_cmd;s§{CONFIG_$s}§${value}§"
done

sed "$sed_cmd" < Makefile.sets.in > Makefile.sets

for dir in . lib util; do
  rm $dir/.depend $dir/.libdepend; make -C $dir .depend
done &> /dev/null








cat << EOF

Configuration finished.

You may want to edit "config.h" now.

After done, issue 'make'. Preferably GNU make.

You can install by typing 'make install'.
You can uninstall later by typing 'make uninstall'.

EOF
